#include <stdio.h>
#include <unistd.h>
#include <fcntl.h>
#include <sys/wait.h>
#include <stdlib.h>
#include <sys/stat.h>
#include <errno.h>
#include <string.h>

#define FILE_NAME "test.txt"
#define LOCK_FILE_NAME "test.txt.lock"

enum State {
    writing, reading
};

int main(void) {
    pid_t npid = fork();

    char process_name;
    enum State state;
    int error;
    int temp;
    ssize_t file_size;
    FILE *file;
    int fd;
    int i;
    struct flock nlock;
    char text[] = "Hello World from process A.\n";
    char *buffer = (char *) calloc(100, sizeof(char));
    memset(&nlock, 0, sizeof(nlock));

    if (npid != 0) {
        process_name = 'A';
        text[25] = process_name;
        state = writing;
    } else {
        process_name = 'B';
        text[25] = process_name;
        state = reading;
    }
    printf("This is process %c\n", process_name);

    while (1) {
        if (state == writing) {
            do {
                fd = open(FILE_NAME, O_RDWR);
                if (fd != -1) close(fd);
            } while (fd != -1);

            // Open & lock file
            fd = open(FILE_NAME, O_CREAT | O_RDWR, S_IRUSR | S_IWUSR);
            nlock.l_type = F_RDLCK;
            error = fcntl(fd, F_SETLKW, &nlock);
            printf("%c: Locked file: %i\n", process_name, error);

            // Write to file
            write(fd, text, strlen(text));

            // Unlock & close file
            nlock.l_type = F_UNLCK;
            error = fcntl(fd, F_SETLKW, &nlock);
            printf("%c: Unlocked file: %i\n", process_name, error);
            close(fd);
            printf("%c: Closed file!\n", process_name);

            sleep(2);   // Give the other process a chance to read the file

            // Delete file
            do {
                fcntl(fd, F_GETLK, &nlock);
                printf("%c: Lock status: %i\n", process_name, nlock.l_pid);
            } while (nlock.l_pid);
            printf("%c: No lock\n", process_name);
            error = remove(FILE_NAME);
            do {
                fd = open(FILE_NAME, O_RDWR);
            } while (fd != -1);
            if (error == 0) printf("%c: Successfully deleted file.\n", process_name);
            else printf("%c: Deleting file failed!\n", process_name);

            state = reading;    // Swap state
        } else if (state == reading) {
            do {
                fd = open(FILE_NAME, O_RDWR);
                //printf("%c: fd: %i\n", process_name, fd);
            } while (fd == -1);
            printf("%c: fd: %i\n", process_name, fd);
            nlock.l_type = F_WRLCK;
            error = fcntl(fd, F_SETLKW, &nlock);
            printf("%c: Locked file: %i\n", process_name, error);

            // Read file
            printf("%c: Reading from file:\n", process_name);
            file_size = read(fd, buffer, 50);
            printf("%c: file size: %zi\n", process_name, file_size);
            for (i = 0; i < file_size; i++) putchar(buffer[i]);
            printf("%c: Finished reading file.\n", process_name);

            // Close file & remove lock
            nlock.l_type = F_UNLCK;
            error = fcntl(fd, F_SETLKW, &nlock);
            printf("%c: Unlocked file: %i\n", process_name, error);
            close(fd);
            printf("%c: Closed file!\n", process_name);

            state = writing;    // Swap state
        }

    }
}
